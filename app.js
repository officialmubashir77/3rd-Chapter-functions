// Functions

// it is a simply peice of code which we can use in our 
// program many times .

// it is just like a variable holding some peice of code

// ///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// Declaration ///////////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////

// function funcName() {
//     console.log("You are running code presenting in the funciton");
// }

// // calling function 
// funcName()



// ///////////////////////////////////////////////////////////////////////////////////////////////////
// // Function Expression

// // also called anonymous funciton ....
// let addFunc = function( a , b){
//     return a + b ;

// }

// // Calling function expresssion
// let funcRes = addFunc(20 , 2 ) ;
// console.log(funcRes);


// ///////////////////////////////////////////////////////////////////////////////////////////////////
// // Real Example .
// // Passing Values (Arguments and parameters)
// // return in function
// // Paremeters are blocked scopes .

// let nameFunc = function(myName = "Mubashir"){
//     return myName ;
// }

// let checkMyName = nameFunc("Mubashir M.Ibrahim")
// console.log(checkMyName);



// ///////////////////////////////////////////////////////////////////////////////////////////////////

// // Returning Values (How to return value from the funciton .)

// let ageCalculation = function(birthYear) {
//     let age = 2023 - birthYear ;
//     return `Your Age is ${age}`

//     console.log("Afer return no code of line will execute .");
// }

// let checkyourAge = ageCalculation(prompt("Enter Your Birth Year ..."))
// console.log(checkyourAge);



// ///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// Arrow Functions ///////////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////

// special form of function expressions
// it allows us to write function more fast because
// no need to use fucntion keyword 
// no need to use parenthesis () in case of single parameter 
// if single line of code no need to use {} bracket 
// if single line of code no need to use return statement  

// let invitation = function(myName) {
//     return `My Full Name is ${myName}`
// }

// let callInvitation = invitation('Mubashir');
// console.log(callInvitation);

///////////////////////////////////////////////////////////////////////////////////////////
// Arrow Function 

// let invite = (eventName) => `Welcome ${eventName} to this Event`
// console.log(invite("Mubashir"));





// ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// High Order Fucntion ////////////////////////////////
// ///////////////////////////////////////////////////////////////////////////////////////////////////

// // passing function as an argument (High Order Function)

// let upperCase = function(str){
//     return str.toUpperCase() ;
// }

// let lowerCase = function(str){
//     return str.toLowerCase() ;
// }

// let transfer = function(str , fun){
//     return fun(str)
// }
// console.log(transfer("HELLO" , lowerCase));



// Function
// returning another function 

// let compliment = function(msg){
//     return function(anyName){
//         // return `${msg} ${anyName}` ;
//         console.log(`${msg} ${anyName}`) ;
//     }
// }

// let callComp = compliment("You are Good Coder")("Mubashir");
// console.log(callComp);




// // 2nd Method 

// let comlimented = compliment("You are Good Coder .")
// comlimented("ALi.")

// // compliment is higher order Fucniton .



// ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// IIFE Fucntion ////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////////////////////////


// Funciton 

// immediately invoked Funciton 
// Execuated Only once 

// (function (myname){
//     console.log(`My full Name is ${myname}`);
// })("Mubashir")




// ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// setTimeOut() and setInterval() Fucntion /////////////////////
// /////////////////////////////////////////////////////////////////////////////////////////////////


// Timer Fucntions in JS    


// setTimeOut only run only once time .
// setInterval Run continiuosly (interval of time , then repeating) .

// setTimeout(function(){
//     console.log("Run After 2 Sec");
// }, 2000)


// setInterval(function(){
//     console.log("Continiously Run After 2 Sec");
// }, 2000) // 2000 = 2 sec

// // ///////////////////////////////////////////////////////////////////////////////////////////////

// setInterval(function(myName){
//     console.log(`My Name is ${myName}, Continiously Run After 2 Sec`);
// }, 2000, "Mubashir") // 2000 = 2 sec






// ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////// Hoisting  ///////////////////// ////////////////////////////
// /////////////////////////////////////////////////////////////////////////////////////////////////

// variable decalrations are hoisted toward top of their scope .
// only in var keyword . not in let and const .

// console.log(test);

// var test = "Testing"  ;   //// Output = undefined

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// test = 8 ;
// console.log(test);

// var test ;   //// Output = 8 ;


// /////////////////////////////////////////////////////////////////////////////////////////////////////////
//function declaration 
// not in arrow funcions and fucniton exprssions ..... only in function declarations 


// test()
// function test () {
//     console.log("Hello");
// }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// funcions 
// parameters and arguments and Calling functions
// fucntion expressions in var Fucntion
// hoisting
// default parameters 
// arrow functions in js let myname  = (putName) => `My Name is ${putName}` 
// Higher order functions ==> as an argument pass other fucntion and return keyword pass another function
// IIFE (function(){})()
// Timer Fucntions (setTimeOut(fucntion , 2000) and setInterval(fucntion , 2000))